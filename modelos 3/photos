#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <stdlib.h>

//Variables para interacción con el usuario.
GLfloat tx = 0;
GLfloat ty = 0;
GLfloat rx = 0;
GLfloat ry = 0;
GLfloat es = 1;
GLboolean proy_orto = GL_FALSE;
GLboolean somb_plano = GL_FALSE;

//Variables de texturas
GLuint id_tex;
unsigned char* tex_photo1 = NULL;
unsigned char* tex_photo2 = NULL;

unsigned char* tex_forest1 = NULL;
unsigned char* tex_forest2 = NULL;
unsigned char* tex_forest3 = NULL;

unsigned char* tex_frame1 = NULL;
unsigned char* tex_frame2 = NULL;

unsigned char* tex_wood_frame = NULL;

int ancho_tex_photo1, alto_tex_photo1, num_comps_tex_photo1;
int ancho_tex_photo2, alto_tex_photo2, num_comps_tex_photo2;

int ancho_tex_forest1, alto_tex_forest1, num_comps_tex_forest1;
int ancho_tex_forest2, alto_tex_forest2, num_comps_tex_forest2;
int ancho_tex_forest3, alto_tex_forest3, num_comps_tex_forest3;

int ancho_tex_frame1, alto_tex_frame1, num_comps_tex_frame1;
int ancho_tex_frame2, alto_tex_frame2, num_comps_tex_frame2;

int ancho_tex_wood_frame, alto_tex_wood_frame, num_comps_tex_wood_frame;

//Configuración y carga de texturas.
void config_tex()
{
    //Se cargan las texturas desde las imágenes.
    tex_photo1 = stbi_load("photo1.jpg", &ancho_tex_photo1, &alto_tex_photo1, &num_comps_tex_photo1, 0);
    tex_photo1 = stbi_load("photo2.jpg", &ancho_tex_photo2, &alto_tex_photo2, &num_comps_tex_photo2, 0);

    tex_forest1 = stbi_load("forest1.jpg", &ancho_tex_forest1, &alto_tex_forest1, &num_comps_tex_forest1, 0);
    tex_forest2 = stbi_load("forest2.jpg", &ancho_tex_forest2, &alto_tex_forest2, &num_comps_tex_forest2, 0);
    tex_forest3 = stbi_load("forestjfif.jfif", &ancho_tex_forest3, &alto_tex_forest3, &num_comps_tex_forest3, 0);

    tex_frame1 = stbi_load("frame1.jpg", &ancho_tex_frame1, &alto_tex_frame1, &num_comps_tex_frame1, 0);
    tex_frame2 = stbi_load("frame2.jpg", &ancho_tex_frame2, &alto_tex_frame2, &num_comps_tex_frame2, 0);


    tex_wood_frame = stbi_load("wood_frame.jpg", &ancho_tex_wood_frame, &alto_tex_wood_frame, &num_comps_tex_wood_frame, 0);//stays the same

    //Se crea la textura.
    glGenTextures(1, &id_tex);
    //Se configura la textura.
    glBindTexture(GL_TEXTURE_2D, id_tex);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
}

void plano(void)
{
    glBegin(GL_QUADS);
    glNormal3f(1, 1, 1);

    glTexCoord2f(1, 0);
    glVertex3f(-1, 0.0, 1);

    glTexCoord2f(1, 1);
    glVertex3f(1, 0, 1);

    glTexCoord2f(0, 1);
    glVertex3f(1, 0, -1);

    glTexCoord2f(0, 0);
    glVertex3f(-1, 0, -1);

    glEnd();
}
void cubo(void) {
    glBegin(GL_QUAD_STRIP);
    //Cara Frontal
    glNormal3f(0, 0, 1);

    glTexCoord2f(0.0, 0.3333);
    glVertex3f(-0.5, -0.5, 0.5);
    glTexCoord2f(0.0, 0.6667);
    glVertex3f(-0.5, 0.5, 0.5);
    glTexCoord2f(0.25, 0.3333);
    glVertex3f(0.5, -0.5, 0.5);
    glTexCoord2f(0.25, 0.6667);
    glVertex3f(0.5, 0.5, 0.5);
    //Cara Derecha
    glNormal3f(1, 0, 0);
    glTexCoord2f(0.5, 0.3333);
    glVertex3f(0.5, -0.5, -0.5);
    glTexCoord2f(0.5, 0.6667);
    glVertex3f(0.5, 0.5, -0.5);
    //Cara Trasera
    glNormal3f(0, 0, -1);
    glTexCoord2f(0.75, 0.3333);
    glVertex3f(-0.5, -0.5, -0.5);
    glTexCoord2f(0.75, 0.6667);
    glVertex3f(-0.5, 0.5, -0.5);
    //Cara Izquierda
    glNormal3f(-1, 0, 0);
    glTexCoord2f(1, 0.3333);
    glVertex3f(-0.5, -0.5, 0.5);
    glTexCoord2f(1, 0.6667);
    glVertex3f(-0.5, 0.5, 0.5);
    glEnd();
    //Cara Superior
    glBegin(GL_QUADS);
    glNormal3f(0, 1, 0);
    glTexCoord2f(0.25, 0.6667);
    glVertex3f(-0.5, 0.5, 0.5);
    glTexCoord2f(0.5, 0.6667);
    glVertex3f(0.5, 0.5, 0.5);
    glTexCoord2f(0.5, 1);
    glVertex3f(0.5, 0.5, -0.5);
    glTexCoord2f(0.25, 1);
    glVertex3f(-0.5, 0.5, -0.5);
    glEnd();
    //Cara Inferior
    glBegin(GL_QUADS);
    glNormal3f(0, -1, 0);
    glTexCoord2f(0.25, 0);
    glVertex3f(-0.5, -0.5, 0.5);
    glTexCoord2f(0.5, 0);
    glVertex3f(0.5, -0.5, 0.5);
    glTexCoord2f(0.5, 0.3333);
    glVertex3f(0.5, -0.5, -0.5);
    glTexCoord2f(0.25, 0.3333);
    glVertex3f(-0.5, -0.5, -0.5);
    glEnd();
}
void wood_frame()//no change
{
    glPushMatrix();
    glScalef(2, 0.3, 2);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA,
        ancho_tex_wood_frame, alto_tex_wood_frame, 0,
        GL_RGBA, GL_UNSIGNED_BYTE, tex_wood_frame);
    cubo();
    glPopMatrix();
}
void photo1()//change for photo
{
    glPushMatrix();
    glScalef(0.7, 0, 0.7);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_photo1, alto_tex_photo1, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_photo1);
    plano();
    glPopMatrix();
}
void photo2()//change for photo
{
    glPushMatrix();
    glScalef(0.7, 0, 0.7);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_photo2, alto_tex_photo2, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_photo2);
    plano();
    glPopMatrix();
}
void photo3()//change for photo
{
    glPushMatrix();
    glScalef(0.7, 0, 0.7);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_forest1, alto_tex_forest1, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_forest1);
    plano();
    glPopMatrix();
}
void photo4()//change for photo
{
    glPushMatrix();
    glScalef(0.7, 0, 0.7);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_forest2, alto_tex_forest2, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_forest2);
    plano();
    glPopMatrix();
}
void photo5()//change for photo
{
    glPushMatrix();
    glScalef(0.7, 0, 0.7);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_forest3, alto_tex_forest3, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_forest3);
    plano();
    glPopMatrix();
}

void frame1()//change for frame
{
    glPushMatrix();
    glTranslatef(0, 1, 0);
    glScalef(5, 5, 5);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_frame1, alto_tex_frame1, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_frame1);
    plano();

    glPushMatrix();
    glTranslatef(0, -0.155, 0);
    wood_frame();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0, 0.05, 0);
    photo1();
    glPopMatrix();

    glPopMatrix();
}
void frame2()//change for frame
{
    glPushMatrix();
    glTranslatef(0, 1, 0);
    glScalef(5, 5, 5);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
        ancho_tex_frame2, alto_tex_frame2, 0,
        GL_RGB, GL_UNSIGNED_BYTE, tex_frame2);
    plano();

    glPushMatrix();
    glTranslatef(0, -0.155, 0);
    wood_frame();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0, 0.05, 0);
    photo1();
    glPopMatrix();

    glPopMatrix();
}
void dibujar()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glPushMatrix();
    glTranslatef(tx, ty, 0);
    glRotatef(rx, 1, 0, 0);
    glRotatef(ry, 0, 1, 0);
    glScalef(es, es, es);

    glRotatef(90, 0, 0, 1);
    glRotatef(180, 1, 0, 0);
    glRotatef(180, 0, 1, 0);
    glScalef(1, 1, 1.5);
    frame1();
    glPopMatrix();
    glutSwapBuffers();
}

void camara(void) {
    float ancho = GLUT_WINDOW_WIDTH;
    float alto = GLUT_WINDOW_HEIGHT;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (proy_orto) {
        glOrtho(-5, 5, -5, 5, -5, 5);
    }
    else {
        gluPerspective(45, ancho / alto, 0.1, 1000);
        gluLookAt(12, 12, 12, 0, 2, 0, 0, 1, 0);
    }
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void teclado(unsigned char key, int x, int y) {
    switch (key) {
        //PROYECCIÓN
    case 'P': case 'p':
        proy_orto = !proy_orto;
        camara();
        break;
        //SOMBREADO
    case ' ':
        somb_plano = !somb_plano;
        somb_plano ? glShadeModel(GL_FLAT) : glShadeModel(GL_SMOOTH);
        break;
        //TRASLACIÓN
    case 'W': case 'w': ty += 0.1; break;
    case 'S': case 's': ty -= 0.1; break;
    case 'A': case 'a': tx -= 0.1; break;
    case 'D': case 'd': tx += 0.1; break;
        //ROTACIÓN
    case 'I': case 'i': rx += 5; break;
    case 'K': case 'k': rx -= 5; break;
    case 'J': case 'j': ry += 5; break;
    case 'L': case 'l': ry -= 5; break;
        //ESCALA
    case '+': es += 0.1; break;
    case '-': es -= 0.1; break;
    case 27:
        exit(0);
        break;
    }
    glutPostRedisplay();
}

void redimensionar(int ancho, int alto) {
    if (alto == 0) alto = 1;
    int lado = ancho < alto ? ancho : alto;
    glViewport((ancho - lado) / 2, (alto - lado) / 2, lado, lado);
    camara();
}

void config_GLUT(void) {
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Tarea 5");
    glutDisplayFunc(dibujar);
    glutKeyboardFunc(teclado);
    glutReshapeFunc(redimensionar);
}

void config_OGL(void) {
    glClearColor(0.2, 0.2, 0.2, 1.0);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);
    //Inicialización de las texturas.
    glEnable(GL_TEXTURE_2D);
    config_tex();
    camara();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    config_GLUT();
    config_OGL();
    glutMainLoop();
    return 0;
}
